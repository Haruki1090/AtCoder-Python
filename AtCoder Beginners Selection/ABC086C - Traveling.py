# 問題文
# シカのAtCoDeerくんは二次元平面上で旅行をしようとしています。 
# AtCoDeerくんの旅行プランでは、時刻 0 に 点 (0,0) を出発し、 1 以上 N 以下の各 i に対し、時刻 t_iに 点 (x_i,y_i) を訪れる予定です。
# AtCoDeerくんが時刻 t に 点 (x,y) にいる時、 時刻 t+1 には 点 (x+1,y), (x−1,y), (x,y+1), (x,y−1) のうちいずれかに存在することができます。 
# その場にとどまることは出来ないことに注意してください。 
# AtCoDeerくんの旅行プランが実行可能かどうか判定してください。

# 制約
# 1≤N≤10^5
# 0≤t_i≤10^9
# |x_i|≤10^6
# |y_i|≤10^6
# 入力はすべて整数

# 入力
# 入力は以下の形式で標準入力から与えられる。
# N
# t_1 x_1 y_1
# t_2 x_2 y_2
# :
# t_N x_N y_N

# 出力
# AtCoDeerくんの旅行プランが実行可能ならば Yes を、不可能ならば No を出力してください。

n = int(input()) 
t, x, y = 0, 0, 0 
for i in range(n):
    t_, x_, y_ = map(int, input().split()) # ここで入力を受け取る
    dt = t_ - t # 時間の差
    dist = abs(x_ - x) + abs(y_ - y) # 距離の差
    if dt < dist or (dt - dist) % 2 != 0: # 時間の差が距離の差より小さい場合、または、時間の差と距離の差が偶数でない場合
        print('No') 
        exit() # プログラムを終了する
    t, x, y = t_, x_, y_ # 次の時刻、x座標、y座標を更新
print('Yes') # すべての移動が可能な場合